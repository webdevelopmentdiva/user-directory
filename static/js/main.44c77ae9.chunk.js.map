{"version":3,"sources":["components/Jumbotron/jumbotron.js","utils/API.js","components/Search/search.js","components/EmployeeList/employeeList.js","components/TableData/tableData.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","axios","get","Search","handleOnChange","users","type","placeholder","onChange","event","EmployeeList","props","map","user","index","key","src","picture","large","alt","name","title","first","last","email","phone","TableData","console","log","target","value","filter","filteredList","state","item","Object","values","join","toLowerCase","indexOf","setState","filteredUsers","API","then","res","data","results","catch","err","this","Component","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uPAiBeA,MAbf,WACI,OACI,yBAAKC,UAAU,aACnB,kDACA,kD,yDCLW,EAEC,WAEZ,OAAOC,IAAMC,IAAI,kDCWNC,MAhBf,YAA4C,IAA1BC,EAAyB,EAAzBA,eACd,OADuC,EAATC,MAE1B,6BACI,8BACI,2BAEIC,KAAK,SACLC,YAAY,cACZC,SAAU,SAACC,GAAD,OAAWL,EAAeK,SC0BzCC,MAhCf,SAAsBC,GAClB,OACI,+BACKA,EAAMN,MAAMO,KAAI,SAACC,EAAMC,GACpB,OAEA,wBAAIC,IAAKD,GACL,4BACI,yBAAKE,IAAKH,EAAKI,QAAQC,MAAOC,IAAI,cAEtC,4BACKN,EAAKO,KAAKC,OAEf,4BACKR,EAAKO,KAAKE,OAEf,4BACKT,EAAKO,KAAKG,MAEf,4BACKV,EAAKW,OAEV,4BACKX,EAAKY,aCrBTC,E,kDACjB,WAAYf,GAAO,IAAD,8BACd,cAAMA,IAqBVP,eAAiB,SAACK,GACdkB,QAAQC,IAAInB,EAAMoB,OAAOC,OAEzB,IAAMC,EAAStB,EAAMoB,OAAOC,MACtBE,EAAe,EAAKC,MAAM5B,MAAM0B,QAAO,SAAAG,GAKzC,OAJAP,QAAQC,IAAIM,IAIqC,IAHpCC,OAAOC,OAAOF,GACNG,KAAK,IACLC,cACPC,QAAQR,EAAOO,kBAEjC,EAAKE,SAAS,CAAEC,cAAeT,IAC/BL,QAAQC,IAAII,IAhCZ,EAAKC,MAAQ,CACT5B,MAAO,GACPoC,cAAe,IAJL,E,gEAQG,IAAD,OAEhBC,IACKC,MAAK,SAACC,GACHjB,QAAQC,IAAIgB,GACZ,EAAKJ,SAAS,CACVnC,MAAMuC,EAAIC,KAAKC,QACfL,cAAcG,EAAIC,KAAKC,aAG9BC,OAAM,SAACC,GAAD,OAASrB,QAAQC,IAAIoB,Q,+BAmBhC,OACI,6BACI,kBAAC,EAAD,CACI5C,eAAgB6C,KAAK7C,eACrBC,MAAO4C,KAAKhB,MAAM5B,QAGtB,+BACI,kBAAC,EAAD,CAAcA,MAAO4C,KAAKhB,MAAMQ,sB,GA9CbS,aCYxBC,MAZf,WAIE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.44c77ae9.chunk.js","sourcesContent":["import React from \"react\";\n\n//import \"jumbotron.css\";\n\nfunction Jumbotron() {\n    return (\n        <div className=\"jumbotron\">\n    <h1>Employee Directory</h1>\n    <p>\n       Skyler is da best\n    </p>\n    \n    </div>\n\n    );\n}\n\nexport default Jumbotron;","import axios from \"axios\";\n\n// Export an object with a \"search\" method that searches the Giphy API for the passed query\nexport default {\n    /* Get all the employees*/\n  getEmployees: () => {\n      /* You can choose to save the url in a variables or you can just type the url in the axios call  */\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n  }\n};","import React from \"react\";\n\nfunction Search({ handleOnChange, users }) {\n    return ( \n        <div>\n            <form> \n                <input\n                   \n                    type=\"Search\"\n                    placeholder=\"Search Here\"\n                    onChange={(event) => handleOnChange(event)} \n                    >\n                </input>\n            </form>\n        </div>\n    );\n}\n\nexport default Search;","import React from 'react';\n\n\n\nfunction EmployeeList(props) {\n    return (\n        <tbody>\n            {props.users.map((user, index) => {\n                return(\n\n                <tr key={index}>\n                    <td>\n                        <img src={user.picture.large} alt=\"employee\"></img>\n                    </td>\n                    <td>\n                        {user.name.title}\n                    </td>\n                    <td>\n                        {user.name.first}\n                    </td>\n                    <td>\n                        {user.name.last}\n                    </td>\n                    <td>\n                        {user.email}\n                    </td>\n                    <td>\n                        {user.phone}\n                    </td>\n                </tr>\n                )\n            })}\n        </tbody>\n    )\n};\n\nexport default EmployeeList;","import React, { Component } from \"react\";\nimport API from \"../../utils/API\";\nimport Search from \"../Search/search\";\nimport EmployeeList from \"../EmployeeList/employeeList\";\n\n\nexport default class TableData extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            users: [],\n            filteredUsers: []\n        };\n    }\n\n    componentDidMount() {\n\n        API.getEmployees()\n            .then((res) => {\n                console.log(res);\n                this.setState({\n                    users:res.data.results,\n                    filteredUsers:res.data.results,\n                });\n            })\n            .catch((err) => console.log(err));\n    }\n\n\n    handleOnChange = (event) => {\n        console.log(event.target.value);\n\n        const filter = event.target.value;\n        const filteredList = this.state.users.filter(item=> {\n            console.log(item);\n            let values = Object.values(item)\n                                .join(\"\")\n                                .toLowerCase();\n            return values.indexOf(filter.toLowerCase()) !== -1;\n        });\n        this.setState({ filteredUsers: filteredList});\n        console.log(filteredList);\n    };\n    render() {\n        return (\n            <div>\n                <Search \n                    handleOnChange={this.handleOnChange}\n                    users={this.state.users} \n                />\n            \n                <table>\n                    <EmployeeList users={this.state.filteredUsers} />\n                </table>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Jumbotron from \"./components/Jumbotron/jumbotron.js\";\nimport './App.css';\nimport TableData from \"./components/TableData/tableData\";\n\n\nfunction App() {\n\n\n\n  return (\n    <React.Fragment>\n      <Jumbotron />\n      <TableData />\n    </React.Fragment>   \n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}